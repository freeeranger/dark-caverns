buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        maven { url='https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
//
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = project.dark_caverns_version
group = 'com.freeranger.dark_caverns'
archivesBaseName = 'dark_caverns'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

mixin {
    add sourceSets.main, "dark_caverns.refmap.json"
}


minecraft {
    mappings channel: 'official', version: project.mc_version

    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=dark_caverns.mixins.json"

            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // property 'forge.logging.console.level', 'debug'

            mods {
                dark_caverns {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg "-mixin.config=dark_caverns.mixins.json"

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            mods {
                dark_caverns {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'dark_caverns', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources')

            environment 'target', 'fmluserdevdata'

            mods {
                dark_caverns {
                    source sourceSets.main
                }
            }
        }
    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
}

dependencies {

    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"

    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.33')

    if (project.hasProperty('mixin_version')) {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor".toString()
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": "dark_caverns",
            "Specification-Vendor": "freeranger",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"freeranger",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "dark_caverns.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}